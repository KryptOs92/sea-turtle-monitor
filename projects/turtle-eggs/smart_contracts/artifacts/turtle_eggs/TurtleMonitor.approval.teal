#pragma version 10

smart_contracts.turtle_eggs.contract.TurtleMonitor.approval_program:
    intcblock 0 1 3
    bytecblock "admin" 0x31 0x63726561746f723a 0x6d6f6469666965723a 0x151f7c75 0x6567673a 0x2066726f6d3d 0x20746f3d
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.turtle_eggs.contract.TurtleMonitor.__init__() -> void:
__init__:
    // smart_contracts/turtle_eggs/contract.py:20
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/turtle_eggs/contract.py:21
    // self.admin = Txn.sender.bytes
    bytec_0 // "admin"
    txn Sender
    app_global_put
    retsub


// smart_contracts.turtle_eggs.contract.TurtleMonitor.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/turtle_eggs/contract.py:13
    // class TurtleMonitor(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@10
    pushbytess 0x0378a0d1 0xd318c166 0x33fd2504 0x0fd6d7dd 0xc8f9bbd5 0xc40477b8 // method "add_creator(address)void", method "remove_creator(address)void", method "add_modifier(address)void", method "remove_modifier(address)void", method "create_egg_nft(string,string,string)uint64", method "update_egg_data(uint64,string,string)uint64"
    txna ApplicationArgs 0
    match __puya_arc4_router___add_creator_route@2 __puya_arc4_router___remove_creator_route@3 __puya_arc4_router___add_modifier_route@4 __puya_arc4_router___remove_modifier_route@5 __puya_arc4_router___create_egg_nft_route@6 __puya_arc4_router___update_egg_data_route@7
    intc_0 // 0
    retsub

__puya_arc4_router___add_creator_route@2:
    // smart_contracts/turtle_eggs/contract.py:29
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/turtle_eggs/contract.py:13
    // class TurtleMonitor(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/turtle_eggs/contract.py:29
    // @abimethod
    callsub add_creator
    intc_1 // 1
    retsub

__puya_arc4_router___remove_creator_route@3:
    // smart_contracts/turtle_eggs/contract.py:36
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/turtle_eggs/contract.py:13
    // class TurtleMonitor(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/turtle_eggs/contract.py:36
    // @abimethod
    callsub remove_creator
    intc_1 // 1
    retsub

__puya_arc4_router___add_modifier_route@4:
    // smart_contracts/turtle_eggs/contract.py:43
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/turtle_eggs/contract.py:13
    // class TurtleMonitor(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/turtle_eggs/contract.py:43
    // @abimethod
    callsub add_modifier
    intc_1 // 1
    retsub

__puya_arc4_router___remove_modifier_route@5:
    // smart_contracts/turtle_eggs/contract.py:50
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/turtle_eggs/contract.py:13
    // class TurtleMonitor(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/turtle_eggs/contract.py:50
    // @abimethod
    callsub remove_modifier
    intc_1 // 1
    retsub

__puya_arc4_router___create_egg_nft_route@6:
    // smart_contracts/turtle_eggs/contract.py:91
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/turtle_eggs/contract.py:13
    // class TurtleMonitor(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    // smart_contracts/turtle_eggs/contract.py:91
    // @abimethod
    callsub create_egg_nft
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___update_egg_data_route@7:
    // smart_contracts/turtle_eggs/contract.py:135
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/turtle_eggs/contract.py:13
    // class TurtleMonitor(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    // smart_contracts/turtle_eggs/contract.py:135
    // @abimethod
    callsub update_egg_data
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@10:
    // smart_contracts/turtle_eggs/contract.py:13
    // class TurtleMonitor(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@14:
    // smart_contracts/turtle_eggs/contract.py:13
    // class TurtleMonitor(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.turtle_eggs.contract.TurtleMonitor.add_creator(new_creator: bytes) -> void:
add_creator:
    // smart_contracts/turtle_eggs/contract.py:29-30
    // @abimethod
    // def add_creator(self, new_creator: Address) -> None:
    proto 1 0
    // smart_contracts/turtle_eggs/contract.py:31
    // assert Txn.sender.bytes == self.admin, "Only admin can add creators"
    txn Sender
    intc_0 // 0
    bytec_0 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Only admin can add creators
    // smart_contracts/turtle_eggs/contract.py:33
    // box_key = b"creator:" + new_creator.bytes
    bytec_2 // 0x63726561746f723a
    frame_dig -1
    concat
    // smart_contracts/turtle_eggs/contract.py:34
    // op.Box.put(box_key, b"1")  # indica che new_creator Ã¨ un 'creator'
    bytec_1 // 0x31
    box_put
    retsub


// smart_contracts.turtle_eggs.contract.TurtleMonitor.remove_creator(old_creator: bytes) -> void:
remove_creator:
    // smart_contracts/turtle_eggs/contract.py:36-37
    // @abimethod
    // def remove_creator(self, old_creator: Address) -> None:
    proto 1 0
    // smart_contracts/turtle_eggs/contract.py:38
    // assert Txn.sender.bytes == self.admin, "Only admin can remove creators"
    txn Sender
    intc_0 // 0
    bytec_0 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Only admin can remove creators
    // smart_contracts/turtle_eggs/contract.py:40
    // box_key = b"creator:" + old_creator.bytes
    bytec_2 // 0x63726561746f723a
    frame_dig -1
    concat
    // smart_contracts/turtle_eggs/contract.py:41
    // op.Box.delete(box_key)
    box_del
    pop
    retsub


// smart_contracts.turtle_eggs.contract.TurtleMonitor.add_modifier(new_modifier: bytes) -> void:
add_modifier:
    // smart_contracts/turtle_eggs/contract.py:43-44
    // @abimethod
    // def add_modifier(self, new_modifier: Address) -> None:
    proto 1 0
    // smart_contracts/turtle_eggs/contract.py:45
    // assert Txn.sender.bytes == self.admin, "Only admin can add modifiers"
    txn Sender
    intc_0 // 0
    bytec_0 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Only admin can add modifiers
    // smart_contracts/turtle_eggs/contract.py:47
    // box_key = b"modifier:" + new_modifier.bytes
    bytec_3 // 0x6d6f6469666965723a
    frame_dig -1
    concat
    // smart_contracts/turtle_eggs/contract.py:48
    // op.Box.put(box_key, b"1")
    bytec_1 // 0x31
    box_put
    retsub


// smart_contracts.turtle_eggs.contract.TurtleMonitor.remove_modifier(old_modifier: bytes) -> void:
remove_modifier:
    // smart_contracts/turtle_eggs/contract.py:50-51
    // @abimethod
    // def remove_modifier(self, old_modifier: Address) -> None:
    proto 1 0
    // smart_contracts/turtle_eggs/contract.py:52
    // assert Txn.sender.bytes == self.admin, "Only admin can remove modifiers"
    txn Sender
    intc_0 // 0
    bytec_0 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Only admin can remove modifiers
    // smart_contracts/turtle_eggs/contract.py:54
    // box_key = b"modifier:" + old_modifier.bytes
    bytec_3 // 0x6d6f6469666965723a
    frame_dig -1
    concat
    // smart_contracts/turtle_eggs/contract.py:55
    // op.Box.delete(box_key)
    box_del
    pop
    retsub


// smart_contracts.turtle_eggs.contract.TurtleMonitor.create_egg_nft(name: bytes, url: bytes, data_blob: bytes) -> uint64:
create_egg_nft:
    // smart_contracts/turtle_eggs/contract.py:91-92
    // @abimethod
    // def create_egg_nft(self, name: String, url: String, data_blob: String) -> UInt64:
    proto 3 1
    // smart_contracts/turtle_eggs/contract.py:100
    // is_admin = (Txn.sender.bytes == self.admin)
    txn Sender
    intc_0 // 0
    bytec_0 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    // smart_contracts/turtle_eggs/contract.py:101
    // is_creat = self.is_creator(Txn.sender.bytes)
    txn Sender
    callsub is_creator
    // smart_contracts/turtle_eggs/contract.py:103
    // assert (is_admin or is_creat), "Not authorized to create"
    ||
    assert // Not authorized to create
    // smart_contracts/turtle_eggs/contract.py:105-115
    // # 1) Creiamo l'ASA (NFT)
    // itxn_result = itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     asset_name=name.bytes,
    //     url=url.bytes,
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    // ).submit()
    itxn_begin
    // smart_contracts/turtle_eggs/contract.py:111
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/turtle_eggs/contract.py:112-114
    // reserve=Global.current_application_address,
    // freeze=Global.current_application_address,
    // clawback=Global.current_application_address,
    dupn 3
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    frame_dig -2
    itxn_field ConfigAssetURL
    frame_dig -3
    itxn_field ConfigAssetName
    // smart_contracts/turtle_eggs/contract.py:108
    // decimals=0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/turtle_eggs/contract.py:107
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // smart_contracts/turtle_eggs/contract.py:105-106
    // # 1) Creiamo l'ASA (NFT)
    // itxn_result = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/turtle_eggs/contract.py:105-115
    // # 1) Creiamo l'ASA (NFT)
    // itxn_result = itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     asset_name=name.bytes,
    //     url=url.bytes,
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    // ).submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/turtle_eggs/contract.py:119-120
    // # 2) Registriamo lo stato iniziale ("non_schiuso") in Box
    // egg_key = b"egg:" + op.itob(created_asa_id)
    dup
    itob
    bytec 5 // 0x6567673a
    dig 1
    concat
    // smart_contracts/turtle_eggs/contract.py:121-123
    // # Mettiamo un blob di esempio (stato e magari campi futuri)
    // # Per semplicitÃ , scriviamo "state=non_schiuso"
    // op.Box.put(egg_key, data_blob.bytes)
    frame_dig -1
    box_put
    // smart_contracts/turtle_eggs/contract.py:126
    // b"Create ASA=" + op.itob(created_asa_id) +
    pushbytes 0x437265617465204153413d
    swap
    concat
    // smart_contracts/turtle_eggs/contract.py:127
    // b" from=" +
    bytec 6 // 0x2066726f6d3d
    // smart_contracts/turtle_eggs/contract.py:126-127
    // b"Create ASA=" + op.itob(created_asa_id) +
    // b" from=" +
    concat
    // smart_contracts/turtle_eggs/contract.py:128
    // b" to=" + data_blob.bytes +
    bytec 7 // 0x20746f3d
    // smart_contracts/turtle_eggs/contract.py:126-128
    // b"Create ASA=" + op.itob(created_asa_id) +
    // b" from=" +
    // b" to=" + data_blob.bytes +
    concat
    frame_dig -1
    concat
    // smart_contracts/turtle_eggs/contract.py:129
    // b" initialURL=" + url.bytes
    pushbytes 0x20696e697469616c55524c3d
    // smart_contracts/turtle_eggs/contract.py:126-129
    // b"Create ASA=" + op.itob(created_asa_id) +
    // b" from=" +
    // b" to=" + data_blob.bytes +
    // b" initialURL=" + url.bytes
    concat
    // smart_contracts/turtle_eggs/contract.py:124-130
    // # 3) Log
    // log_str = (
    //     b"Create ASA=" + op.itob(created_asa_id) +
    //     b" from=" +
    //     b" to=" + data_blob.bytes +
    //     b" initialURL=" + url.bytes
    // )
    frame_dig -2
    // smart_contracts/turtle_eggs/contract.py:126-129
    // b"Create ASA=" + op.itob(created_asa_id) +
    // b" from=" +
    // b" to=" + data_blob.bytes +
    // b" initialURL=" + url.bytes
    concat
    // smart_contracts/turtle_eggs/contract.py:131
    // log(log_str)
    log
    // smart_contracts/turtle_eggs/contract.py:133
    // return created_asa_id
    retsub


// smart_contracts.turtle_eggs.contract.TurtleMonitor.is_creator(addr: bytes) -> uint64:
is_creator:
    // smart_contracts/turtle_eggs/contract.py:57-61
    // # ----------------------------------------------------------------
    // # 2) Helper: check se sender Ã¨ creator o modifier
    // # ----------------------------------------------------------------
    // @subroutine
    // def is_creator(self, addr: Bytes) -> bool:
    proto 1 1
    // smart_contracts/turtle_eggs/contract.py:62
    // creator_box_key = b"creator:" + addr
    bytec_2 // 0x63726561746f723a
    frame_dig -1
    concat
    // smart_contracts/turtle_eggs/contract.py:63
    // value, has_value = op.Box.get(creator_box_key)  # destrutturiamo la tupla
    box_get
    // smart_contracts/turtle_eggs/contract.py:65-68
    // # Se non esiste la box, potresti decidere di restituire False
    // # oppure confrontare value con b"" se preferisci.
    // # Ad esempio:
    // if not has_value:
    bnz is_creator_after_if_else@2
    // smart_contracts/turtle_eggs/contract.py:69
    // return False
    intc_0 // 0
    swap
    retsub

is_creator_after_if_else@2:
    // smart_contracts/turtle_eggs/contract.py:71
    // return (value == b"1")
    frame_dig 0
    bytec_1 // 0x31
    ==
    swap
    retsub


// smart_contracts.turtle_eggs.contract.TurtleMonitor.update_egg_data(asa_id: uint64, new_url: bytes, data_blob: bytes) -> uint64:
update_egg_data:
    // smart_contracts/turtle_eggs/contract.py:135-141
    // @abimethod
    // def update_egg_data(
    //     self,
    //     asa_id: UInt64,
    //     new_url: String,  # Link alla nuova immagine
    //     data_blob: String # JSON o string con altre info (stato, date, ecc.)
    // ) -> UInt64:
    proto 3 1
    // smart_contracts/turtle_eggs/contract.py:150
    // is_admin = (Txn.sender.bytes == self.admin)
    txn Sender
    intc_0 // 0
    bytec_0 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    // smart_contracts/turtle_eggs/contract.py:151
    // is_mod = self.is_modifier(Txn.sender.bytes)
    txn Sender
    callsub is_modifier
    // smart_contracts/turtle_eggs/contract.py:152
    // assert (is_admin or is_mod), "Not authorized to update"
    ||
    assert // Not authorized to update
    // smart_contracts/turtle_eggs/contract.py:154
    // egg_key = b"egg:" + op.itob(asa_id)
    frame_dig -3
    itob
    dup
    bytec 5 // 0x6567673a
    swap
    concat
    dup
    // smart_contracts/turtle_eggs/contract.py:155
    // old_val, has_old = op.Box.get(egg_key)
    box_get
    // smart_contracts/turtle_eggs/contract.py:159-170
    // # 2) Esegui la reconfig dell'ASA: cambiamo 'url' in "new_url"
    // #    Nota: se vuoi cambiare anche "assetName" o "metadataHash", fallo qui.
    // itxn_result = itxn.AssetConfig(
    //     config_asset=asset_to_update,
    //     url=new_url.bytes,
    //     manager=Global.current_application_address,  # ridichiari
    //     reserve=Global.current_application_address,  # se serve
    //     freeze=Global.current_application_address,   # se serve
    //     clawback=Global.current_application_address, # se serve
    //     # manager = Global.current_application_address,  # ridichiari se necessario
    //     fee=0
    // ).submit()
    itxn_begin
    // smart_contracts/turtle_eggs/contract.py:164
    // manager=Global.current_application_address,  # ridichiari
    global CurrentApplicationAddress
    // smart_contracts/turtle_eggs/contract.py:165-167
    // reserve=Global.current_application_address,  # se serve
    // freeze=Global.current_application_address,   # se serve
    // clawback=Global.current_application_address, # se serve
    dupn 3
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    frame_dig -2
    itxn_field ConfigAssetURL
    frame_dig -3
    itxn_field ConfigAsset
    // smart_contracts/turtle_eggs/contract.py:159-161
    // # 2) Esegui la reconfig dell'ASA: cambiamo 'url' in "new_url"
    // #    Nota: se vuoi cambiare anche "assetName" o "metadataHash", fallo qui.
    // itxn_result = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    // smart_contracts/turtle_eggs/contract.py:168-169
    // # manager = Global.current_application_address,  # ridichiari se necessario
    // fee=0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/turtle_eggs/contract.py:159-170
    // # 2) Esegui la reconfig dell'ASA: cambiamo 'url' in "new_url"
    // #    Nota: se vuoi cambiare anche "assetName" o "metadataHash", fallo qui.
    // itxn_result = itxn.AssetConfig(
    //     config_asset=asset_to_update,
    //     url=new_url.bytes,
    //     manager=Global.current_application_address,  # ridichiari
    //     reserve=Global.current_application_address,  # se serve
    //     freeze=Global.current_application_address,   # se serve
    //     clawback=Global.current_application_address, # se serve
    //     # manager = Global.current_application_address,  # ridichiari se necessario
    //     fee=0
    // ).submit()
    itxn_submit
    // smart_contracts/turtle_eggs/contract.py:173-174
    // # 3) Aggiorna i dati in Box (se vuoi conservare altre info: stato, date, ecc.)
    // if has_old:
    bz update_egg_data_after_if_else@3
    // smart_contracts/turtle_eggs/contract.py:175
    // op.Box.delete(egg_key)
    frame_dig 1
    box_del
    pop

update_egg_data_after_if_else@3:
    // smart_contracts/turtle_eggs/contract.py:176
    // op.Box.put(egg_key, data_blob.bytes)
    frame_dig 1
    frame_dig -1
    box_put
    // smart_contracts/turtle_eggs/contract.py:180
    // b"Update ASA=" + op.itob(asa_id) +
    pushbytes 0x557064617465204153413d
    frame_dig 0
    concat
    // smart_contracts/turtle_eggs/contract.py:181
    // b" from=" + old_val +
    bytec 6 // 0x2066726f6d3d
    // smart_contracts/turtle_eggs/contract.py:180-181
    // b"Update ASA=" + op.itob(asa_id) +
    // b" from=" + old_val +
    concat
    frame_dig 2
    concat
    // smart_contracts/turtle_eggs/contract.py:182
    // b" to=" + data_blob.bytes +
    bytec 7 // 0x20746f3d
    // smart_contracts/turtle_eggs/contract.py:180-182
    // b"Update ASA=" + op.itob(asa_id) +
    // b" from=" + old_val +
    // b" to=" + data_blob.bytes +
    concat
    frame_dig -1
    concat
    // smart_contracts/turtle_eggs/contract.py:183
    // b" reconfigURL=" + new_url.bytes
    pushbytes 0x207265636f6e66696755524c3d
    // smart_contracts/turtle_eggs/contract.py:180-183
    // b"Update ASA=" + op.itob(asa_id) +
    // b" from=" + old_val +
    // b" to=" + data_blob.bytes +
    // b" reconfigURL=" + new_url.bytes
    concat
    // smart_contracts/turtle_eggs/contract.py:178-184
    // # 4) Log
    // log_str = (
    //     b"Update ASA=" + op.itob(asa_id) +
    //     b" from=" + old_val +
    //     b" to=" + data_blob.bytes +
    //     b" reconfigURL=" + new_url.bytes
    // )
    frame_dig -2
    // smart_contracts/turtle_eggs/contract.py:180-183
    // b"Update ASA=" + op.itob(asa_id) +
    // b" from=" + old_val +
    // b" to=" + data_blob.bytes +
    // b" reconfigURL=" + new_url.bytes
    concat
    // smart_contracts/turtle_eggs/contract.py:185
    // log(log_str)
    log
    // smart_contracts/turtle_eggs/contract.py:186
    // return asa_id
    frame_dig -3
    frame_bury 0
    retsub


// smart_contracts.turtle_eggs.contract.TurtleMonitor.is_modifier(addr: bytes) -> uint64:
is_modifier:
    // smart_contracts/turtle_eggs/contract.py:73-74
    // @subroutine
    // def is_modifier(self, addr: Bytes ) -> bool:
    proto 1 1
    // smart_contracts/turtle_eggs/contract.py:75
    // modifier_box_key = b"modifier:" + addr
    bytec_3 // 0x6d6f6469666965723a
    frame_dig -1
    concat
    // smart_contracts/turtle_eggs/contract.py:76
    // modifier_val, has_value = op.Box.get(modifier_box_key)
    box_get
    // smart_contracts/turtle_eggs/contract.py:79-82
    // # Se non esiste la box, potresti decidere di restituire False
    // # oppure confrontare value con b"" se preferisci.
    // # Ad esempio:
    // if not has_value:
    bnz is_modifier_after_if_else@2
    // smart_contracts/turtle_eggs/contract.py:83
    // return False
    intc_0 // 0
    swap
    retsub

is_modifier_after_if_else@2:
    // smart_contracts/turtle_eggs/contract.py:85
    // return (modifier_val == b"1")
    frame_dig 0
    bytec_1 // 0x31
    ==
    swap
    retsub
