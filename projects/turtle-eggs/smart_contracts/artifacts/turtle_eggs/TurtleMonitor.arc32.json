{
    "hints": {
        "add_creator(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove_creator(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_modifier(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove_modifier(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_modifier_addr(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_creator_addr(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_egg_nft(string,string,string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_egg_data(uint64,string,string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudHVydGxlX2VnZ3MuY29udHJhY3QuVHVydGxlTW9uaXRvci5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "TurtleMonitor",
        "desc": "\n    Esempio di contratto \"arc4\" (algopy/puya style) con assert invece di Condition/Seq.\n    - 'admin' \u00e8 salvato in Global State alla creazione\n    - Ruoli 'creator' e 'modifier' sono gestiti con Box: es. box key \"creator:<address>\"\n    ",
        "methods": [
            {
                "name": "add_creator",
                "args": [
                    {
                        "type": "address",
                        "name": "new_creator"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "remove_creator",
                "args": [
                    {
                        "type": "address",
                        "name": "old_creator"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "add_modifier",
                "args": [
                    {
                        "type": "address",
                        "name": "new_modifier"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deposit",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "remove_modifier",
                "args": [
                    {
                        "type": "address",
                        "name": "old_modifier"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "is_modifier_addr",
                "args": [
                    {
                        "type": "address",
                        "name": "check_addr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Metodo ABI per controllare se 'check_addr' e' un modifier registrato."
            },
            {
                "name": "is_creator_addr",
                "args": [
                    {
                        "type": "address",
                        "name": "check_addr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Metodo ABI per controllare se 'check_addr' e' un creator registrato."
            },
            {
                "name": "create_egg_nft",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "string",
                        "name": "url"
                    },
                    {
                        "type": "string",
                        "name": "data_blob"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "- Admin o un creator possono chiamare\n- Crea un NFT ASA - Salva in Box \"egg:<asset_id>\" = \"non_schiuso\" (stato iniziale) - Emette un log Ritorna asset_id creato"
            },
            {
                "name": "update_egg_data",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asa_id"
                    },
                    {
                        "type": "string",
                        "name": "new_url"
                    },
                    {
                        "type": "string",
                        "name": "data_blob"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "- Admin o 'modifier'\n- Riconfigura l'ASA cambiando 'url' - Sovrascrive la Box \"egg:<asa_id>\" con i nuovi dati (data_blob) - Emette un log"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}