/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"TurtleMonitor","desc":"\n    Esempio di contratto \"arc4\" (algopy/puya style) con assert invece di Condition/Seq.\n    - 'admin' Ã¨ salvato in Global State alla creazione\n    - Ruoli 'creator' e 'modifier' sono gestiti con Box: es. box key \"creator:<address>\"\n    ","structs":{},"methods":[{"name":"add_creator","args":[{"name":"new_creator","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"remove_creator","args":[{"name":"old_creator","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"add_modifier","args":[{"name":"new_modifier","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"remove_modifier","args":[{"name":"old_modifier","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"is_modifier_addr","desc":"Metodo ABI per controllare se 'check_addr' e' un modifier registrato.","args":[{"name":"check_addr","type":"address"}],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"is_creator_addr","desc":"Metodo ABI per controllare se 'check_addr' e' un creator registrato.","args":[{"name":"check_addr","type":"address"}],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"create_egg_nft","desc":"- Admin o un creator possono chiamare\n- Crea un NFT ASA - Salva in Box \"egg:<asset_id>\" = \"non_schiuso\" (stato iniziale) - Emette un log Ritorna asset_id creato","args":[{"name":"name","type":"string"},{"name":"url","type":"string"},{"name":"data_blob","type":"string"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_egg_data","desc":"- Admin o 'modifier'\n- Riconfigura l'ASA cambiando 'url' - Sovrascrive la Box \"egg:<asa_id>\" con i nuovi dati (data_blob) - Emette un log","args":[{"name":"asa_id","type":"uint64"},{"name":"new_url","type":"string"},{"name":"data_blob","type":"string"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"key":"YWRtaW4=","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudHVydGxlX2VnZ3MuY29udHJhY3QuVHVydGxlTW9uaXRvci5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TurtleMonitor contract
 */
export type TurtleMonitorArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'add_creator(address)void': {
      newCreator: string
    }
    'remove_creator(address)void': {
      oldCreator: string
    }
    'add_modifier(address)void': {
      newModifier: string
    }
    'remove_modifier(address)void': {
      oldModifier: string
    }
    'is_modifier_addr(address)bool': {
      checkAddr: string
    }
    'is_creator_addr(address)bool': {
      checkAddr: string
    }
    'create_egg_nft(string,string,string)uint64': {
      name: string
      url: string
      dataBlob: string
    }
    'update_egg_data(uint64,string,string)uint64': {
      asaId: bigint | number
      newUrl: string
      dataBlob: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'add_creator(address)void': [newCreator: string]
    'remove_creator(address)void': [oldCreator: string]
    'add_modifier(address)void': [newModifier: string]
    'remove_modifier(address)void': [oldModifier: string]
    'is_modifier_addr(address)bool': [checkAddr: string]
    'is_creator_addr(address)bool': [checkAddr: string]
    'create_egg_nft(string,string,string)uint64': [name: string, url: string, dataBlob: string]
    'update_egg_data(uint64,string,string)uint64': [asaId: bigint | number, newUrl: string, dataBlob: string]
  }
}

/**
 * The return type for each method
 */
export type TurtleMonitorReturns = {
  'add_creator(address)void': void
  'remove_creator(address)void': void
  'add_modifier(address)void': void
  'remove_modifier(address)void': void
  'is_modifier_addr(address)bool': boolean
  'is_creator_addr(address)bool': boolean
  'create_egg_nft(string,string,string)uint64': bigint
  'update_egg_data(uint64,string,string)uint64': bigint
}

/**
 * Defines the types of available calls and state of the TurtleMonitor smart contract.
 */
export type TurtleMonitorTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'add_creator(address)void' | 'add_creator', {
      argsObj: TurtleMonitorArgs['obj']['add_creator(address)void']
      argsTuple: TurtleMonitorArgs['tuple']['add_creator(address)void']
      returns: TurtleMonitorReturns['add_creator(address)void']
    }>
    & Record<'remove_creator(address)void' | 'remove_creator', {
      argsObj: TurtleMonitorArgs['obj']['remove_creator(address)void']
      argsTuple: TurtleMonitorArgs['tuple']['remove_creator(address)void']
      returns: TurtleMonitorReturns['remove_creator(address)void']
    }>
    & Record<'add_modifier(address)void' | 'add_modifier', {
      argsObj: TurtleMonitorArgs['obj']['add_modifier(address)void']
      argsTuple: TurtleMonitorArgs['tuple']['add_modifier(address)void']
      returns: TurtleMonitorReturns['add_modifier(address)void']
    }>
    & Record<'remove_modifier(address)void' | 'remove_modifier', {
      argsObj: TurtleMonitorArgs['obj']['remove_modifier(address)void']
      argsTuple: TurtleMonitorArgs['tuple']['remove_modifier(address)void']
      returns: TurtleMonitorReturns['remove_modifier(address)void']
    }>
    & Record<'is_modifier_addr(address)bool' | 'is_modifier_addr', {
      argsObj: TurtleMonitorArgs['obj']['is_modifier_addr(address)bool']
      argsTuple: TurtleMonitorArgs['tuple']['is_modifier_addr(address)bool']
      returns: TurtleMonitorReturns['is_modifier_addr(address)bool']
    }>
    & Record<'is_creator_addr(address)bool' | 'is_creator_addr', {
      argsObj: TurtleMonitorArgs['obj']['is_creator_addr(address)bool']
      argsTuple: TurtleMonitorArgs['tuple']['is_creator_addr(address)bool']
      returns: TurtleMonitorReturns['is_creator_addr(address)bool']
    }>
    & Record<'create_egg_nft(string,string,string)uint64' | 'create_egg_nft', {
      argsObj: TurtleMonitorArgs['obj']['create_egg_nft(string,string,string)uint64']
      argsTuple: TurtleMonitorArgs['tuple']['create_egg_nft(string,string,string)uint64']
      returns: TurtleMonitorReturns['create_egg_nft(string,string,string)uint64']
    }>
    & Record<'update_egg_data(uint64,string,string)uint64' | 'update_egg_data', {
      argsObj: TurtleMonitorArgs['obj']['update_egg_data(uint64,string,string)uint64']
      argsTuple: TurtleMonitorArgs['tuple']['update_egg_data(uint64,string,string)uint64']
      returns: TurtleMonitorReturns['update_egg_data(uint64,string,string)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TurtleMonitorSignatures = keyof TurtleMonitorTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TurtleMonitorNonVoidMethodSignatures = keyof TurtleMonitorTypes['methods'] extends infer T ? T extends keyof TurtleMonitorTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TurtleMonitor smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TurtleMonitorSignatures> = TurtleMonitorTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TurtleMonitor smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TurtleMonitorSignatures> = TurtleMonitorTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TurtleMonitorTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TurtleMonitorCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TurtleMonitorDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TurtleMonitorCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TurtleMonitor smart contract
 */
export abstract class TurtleMonitorParamsFactory {
  /**
   * Constructs a no op call for the add_creator(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addCreator(params: CallParams<TurtleMonitorArgs['obj']['add_creator(address)void'] | TurtleMonitorArgs['tuple']['add_creator(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_creator(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newCreator],
    }
  }
  /**
   * Constructs a no op call for the remove_creator(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeCreator(params: CallParams<TurtleMonitorArgs['obj']['remove_creator(address)void'] | TurtleMonitorArgs['tuple']['remove_creator(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove_creator(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.oldCreator],
    }
  }
  /**
   * Constructs a no op call for the add_modifier(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addModifier(params: CallParams<TurtleMonitorArgs['obj']['add_modifier(address)void'] | TurtleMonitorArgs['tuple']['add_modifier(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_modifier(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newModifier],
    }
  }
  /**
   * Constructs a no op call for the remove_modifier(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeModifier(params: CallParams<TurtleMonitorArgs['obj']['remove_modifier(address)void'] | TurtleMonitorArgs['tuple']['remove_modifier(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove_modifier(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.oldModifier],
    }
  }
  /**
   * Constructs a no op call for the is_modifier_addr(address)bool ABI method
   *
   * Metodo ABI per controllare se 'check_addr' e' un modifier registrato.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isModifierAddr(params: CallParams<TurtleMonitorArgs['obj']['is_modifier_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_modifier_addr(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_modifier_addr(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.checkAddr],
    }
  }
  /**
   * Constructs a no op call for the is_creator_addr(address)bool ABI method
   *
   * Metodo ABI per controllare se 'check_addr' e' un creator registrato.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isCreatorAddr(params: CallParams<TurtleMonitorArgs['obj']['is_creator_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_creator_addr(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_creator_addr(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.checkAddr],
    }
  }
  /**
   * Constructs a no op call for the create_egg_nft(string,string,string)uint64 ABI method
   *
  * - Admin o un creator possono chiamare
  - Crea un NFT ASA - Salva in Box "egg:<asset_id>" = "non_schiuso" (stato iniziale) - Emette un log Ritorna asset_id creato

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createEggNft(params: CallParams<TurtleMonitorArgs['obj']['create_egg_nft(string,string,string)uint64'] | TurtleMonitorArgs['tuple']['create_egg_nft(string,string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_egg_nft(string,string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.url, params.args.dataBlob],
    }
  }
  /**
   * Constructs a no op call for the update_egg_data(uint64,string,string)uint64 ABI method
   *
  * - Admin o 'modifier'
  - Riconfigura l'ASA cambiando 'url' - Sovrascrive la Box "egg:<asa_id>" con i nuovi dati (data_blob) - Emette un log

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateEggData(params: CallParams<TurtleMonitorArgs['obj']['update_egg_data(uint64,string,string)uint64'] | TurtleMonitorArgs['tuple']['update_egg_data(uint64,string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_egg_data(uint64,string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asaId, params.args.newUrl, params.args.dataBlob],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TurtleMonitor smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TurtleMonitorFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TurtleMonitorFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TurtleMonitorClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TurtleMonitorClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TurtleMonitor smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TurtleMonitorDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TurtleMonitorClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TurtleMonitor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TurtleMonitor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TurtleMonitor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TurtleMonitorClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TurtleMonitor smart contract
 */
export class TurtleMonitorClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TurtleMonitorClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TurtleMonitor app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TurtleMonitorClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TurtleMonitorNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TurtleMonitorClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TurtleMonitorClient> {
    return new TurtleMonitorClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TurtleMonitorClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TurtleMonitorClient> {
    return new TurtleMonitorClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TurtleMonitor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `add_creator(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addCreator: (params: CallParams<TurtleMonitorArgs['obj']['add_creator(address)void'] | TurtleMonitorArgs['tuple']['add_creator(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TurtleMonitorParamsFactory.addCreator(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `remove_creator(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeCreator: (params: CallParams<TurtleMonitorArgs['obj']['remove_creator(address)void'] | TurtleMonitorArgs['tuple']['remove_creator(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TurtleMonitorParamsFactory.removeCreator(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `add_modifier(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addModifier: (params: CallParams<TurtleMonitorArgs['obj']['add_modifier(address)void'] | TurtleMonitorArgs['tuple']['add_modifier(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TurtleMonitorParamsFactory.addModifier(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `remove_modifier(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeModifier: (params: CallParams<TurtleMonitorArgs['obj']['remove_modifier(address)void'] | TurtleMonitorArgs['tuple']['remove_modifier(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TurtleMonitorParamsFactory.removeModifier(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `is_modifier_addr(address)bool` ABI method.
     *
     * Metodo ABI per controllare se 'check_addr' e' un modifier registrato.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isModifierAddr: (params: CallParams<TurtleMonitorArgs['obj']['is_modifier_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_modifier_addr(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TurtleMonitorParamsFactory.isModifierAddr(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `is_creator_addr(address)bool` ABI method.
     *
     * Metodo ABI per controllare se 'check_addr' e' un creator registrato.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isCreatorAddr: (params: CallParams<TurtleMonitorArgs['obj']['is_creator_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_creator_addr(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TurtleMonitorParamsFactory.isCreatorAddr(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `create_egg_nft(string,string,string)uint64` ABI method.
     *
    * - Admin o un creator possono chiamare
    - Crea un NFT ASA - Salva in Box "egg:<asset_id>" = "non_schiuso" (stato iniziale) - Emette un log Ritorna asset_id creato

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createEggNft: (params: CallParams<TurtleMonitorArgs['obj']['create_egg_nft(string,string,string)uint64'] | TurtleMonitorArgs['tuple']['create_egg_nft(string,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TurtleMonitorParamsFactory.createEggNft(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `update_egg_data(uint64,string,string)uint64` ABI method.
     *
    * - Admin o 'modifier'
    - Riconfigura l'ASA cambiando 'url' - Sovrascrive la Box "egg:<asa_id>" con i nuovi dati (data_blob) - Emette un log

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateEggData: (params: CallParams<TurtleMonitorArgs['obj']['update_egg_data(uint64,string,string)uint64'] | TurtleMonitorArgs['tuple']['update_egg_data(uint64,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TurtleMonitorParamsFactory.updateEggData(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TurtleMonitor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `add_creator(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addCreator: (params: CallParams<TurtleMonitorArgs['obj']['add_creator(address)void'] | TurtleMonitorArgs['tuple']['add_creator(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TurtleMonitorParamsFactory.addCreator(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `remove_creator(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeCreator: (params: CallParams<TurtleMonitorArgs['obj']['remove_creator(address)void'] | TurtleMonitorArgs['tuple']['remove_creator(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TurtleMonitorParamsFactory.removeCreator(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `add_modifier(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addModifier: (params: CallParams<TurtleMonitorArgs['obj']['add_modifier(address)void'] | TurtleMonitorArgs['tuple']['add_modifier(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TurtleMonitorParamsFactory.addModifier(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `remove_modifier(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeModifier: (params: CallParams<TurtleMonitorArgs['obj']['remove_modifier(address)void'] | TurtleMonitorArgs['tuple']['remove_modifier(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TurtleMonitorParamsFactory.removeModifier(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `is_modifier_addr(address)bool` ABI method.
     *
     * Metodo ABI per controllare se 'check_addr' e' un modifier registrato.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isModifierAddr: (params: CallParams<TurtleMonitorArgs['obj']['is_modifier_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_modifier_addr(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TurtleMonitorParamsFactory.isModifierAddr(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `is_creator_addr(address)bool` ABI method.
     *
     * Metodo ABI per controllare se 'check_addr' e' un creator registrato.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isCreatorAddr: (params: CallParams<TurtleMonitorArgs['obj']['is_creator_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_creator_addr(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TurtleMonitorParamsFactory.isCreatorAddr(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `create_egg_nft(string,string,string)uint64` ABI method.
     *
    * - Admin o un creator possono chiamare
    - Crea un NFT ASA - Salva in Box "egg:<asset_id>" = "non_schiuso" (stato iniziale) - Emette un log Ritorna asset_id creato

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createEggNft: (params: CallParams<TurtleMonitorArgs['obj']['create_egg_nft(string,string,string)uint64'] | TurtleMonitorArgs['tuple']['create_egg_nft(string,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TurtleMonitorParamsFactory.createEggNft(params))
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `update_egg_data(uint64,string,string)uint64` ABI method.
     *
    * - Admin o 'modifier'
    - Riconfigura l'ASA cambiando 'url' - Sovrascrive la Box "egg:<asa_id>" con i nuovi dati (data_blob) - Emette un log

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateEggData: (params: CallParams<TurtleMonitorArgs['obj']['update_egg_data(uint64,string,string)uint64'] | TurtleMonitorArgs['tuple']['update_egg_data(uint64,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TurtleMonitorParamsFactory.updateEggData(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TurtleMonitor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `add_creator(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addCreator: async (params: CallParams<TurtleMonitorArgs['obj']['add_creator(address)void'] | TurtleMonitorArgs['tuple']['add_creator(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TurtleMonitorParamsFactory.addCreator(params))
      return {...result, return: result.return as unknown as (undefined | TurtleMonitorReturns['add_creator(address)void'])}
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `remove_creator(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeCreator: async (params: CallParams<TurtleMonitorArgs['obj']['remove_creator(address)void'] | TurtleMonitorArgs['tuple']['remove_creator(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TurtleMonitorParamsFactory.removeCreator(params))
      return {...result, return: result.return as unknown as (undefined | TurtleMonitorReturns['remove_creator(address)void'])}
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `add_modifier(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addModifier: async (params: CallParams<TurtleMonitorArgs['obj']['add_modifier(address)void'] | TurtleMonitorArgs['tuple']['add_modifier(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TurtleMonitorParamsFactory.addModifier(params))
      return {...result, return: result.return as unknown as (undefined | TurtleMonitorReturns['add_modifier(address)void'])}
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `remove_modifier(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeModifier: async (params: CallParams<TurtleMonitorArgs['obj']['remove_modifier(address)void'] | TurtleMonitorArgs['tuple']['remove_modifier(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TurtleMonitorParamsFactory.removeModifier(params))
      return {...result, return: result.return as unknown as (undefined | TurtleMonitorReturns['remove_modifier(address)void'])}
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `is_modifier_addr(address)bool` ABI method.
     *
     * Metodo ABI per controllare se 'check_addr' e' un modifier registrato.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isModifierAddr: async (params: CallParams<TurtleMonitorArgs['obj']['is_modifier_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_modifier_addr(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TurtleMonitorParamsFactory.isModifierAddr(params))
      return {...result, return: result.return as unknown as (undefined | TurtleMonitorReturns['is_modifier_addr(address)bool'])}
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `is_creator_addr(address)bool` ABI method.
     *
     * Metodo ABI per controllare se 'check_addr' e' un creator registrato.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isCreatorAddr: async (params: CallParams<TurtleMonitorArgs['obj']['is_creator_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_creator_addr(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TurtleMonitorParamsFactory.isCreatorAddr(params))
      return {...result, return: result.return as unknown as (undefined | TurtleMonitorReturns['is_creator_addr(address)bool'])}
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `create_egg_nft(string,string,string)uint64` ABI method.
     *
    * - Admin o un creator possono chiamare
    - Crea un NFT ASA - Salva in Box "egg:<asset_id>" = "non_schiuso" (stato iniziale) - Emette un log Ritorna asset_id creato

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createEggNft: async (params: CallParams<TurtleMonitorArgs['obj']['create_egg_nft(string,string,string)uint64'] | TurtleMonitorArgs['tuple']['create_egg_nft(string,string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TurtleMonitorParamsFactory.createEggNft(params))
      return {...result, return: result.return as unknown as (undefined | TurtleMonitorReturns['create_egg_nft(string,string,string)uint64'])}
    },

    /**
     * Makes a call to the TurtleMonitor smart contract using the `update_egg_data(uint64,string,string)uint64` ABI method.
     *
    * - Admin o 'modifier'
    - Riconfigura l'ASA cambiando 'url' - Sovrascrive la Box "egg:<asa_id>" con i nuovi dati (data_blob) - Emette un log

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateEggData: async (params: CallParams<TurtleMonitorArgs['obj']['update_egg_data(uint64,string,string)uint64'] | TurtleMonitorArgs['tuple']['update_egg_data(uint64,string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TurtleMonitorParamsFactory.updateEggData(params))
      return {...result, return: result.return as unknown as (undefined | TurtleMonitorReturns['update_egg_data(uint64,string,string)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TurtleMonitorClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TurtleMonitor app
   */
  state = {
    /**
     * Methods to access global state for the current TurtleMonitor app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): TurtleMonitorComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a add_creator(address)void method call against the TurtleMonitor contract
       */
      addCreator(params: CallParams<TurtleMonitorArgs['obj']['add_creator(address)void'] | TurtleMonitorArgs['tuple']['add_creator(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addCreator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a remove_creator(address)void method call against the TurtleMonitor contract
       */
      removeCreator(params: CallParams<TurtleMonitorArgs['obj']['remove_creator(address)void'] | TurtleMonitorArgs['tuple']['remove_creator(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeCreator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a add_modifier(address)void method call against the TurtleMonitor contract
       */
      addModifier(params: CallParams<TurtleMonitorArgs['obj']['add_modifier(address)void'] | TurtleMonitorArgs['tuple']['add_modifier(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addModifier(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a remove_modifier(address)void method call against the TurtleMonitor contract
       */
      removeModifier(params: CallParams<TurtleMonitorArgs['obj']['remove_modifier(address)void'] | TurtleMonitorArgs['tuple']['remove_modifier(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeModifier(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a is_modifier_addr(address)bool method call against the TurtleMonitor contract
       */
      isModifierAddr(params: CallParams<TurtleMonitorArgs['obj']['is_modifier_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_modifier_addr(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isModifierAddr(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_modifier_addr(address)bool', v))
        return this
      },
      /**
       * Add a is_creator_addr(address)bool method call against the TurtleMonitor contract
       */
      isCreatorAddr(params: CallParams<TurtleMonitorArgs['obj']['is_creator_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_creator_addr(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isCreatorAddr(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_creator_addr(address)bool', v))
        return this
      },
      /**
       * Add a create_egg_nft(string,string,string)uint64 method call against the TurtleMonitor contract
       */
      createEggNft(params: CallParams<TurtleMonitorArgs['obj']['create_egg_nft(string,string,string)uint64'] | TurtleMonitorArgs['tuple']['create_egg_nft(string,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createEggNft(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_egg_nft(string,string,string)uint64', v))
        return this
      },
      /**
       * Add a update_egg_data(uint64,string,string)uint64 method call against the TurtleMonitor contract
       */
      updateEggData(params: CallParams<TurtleMonitorArgs['obj']['update_egg_data(uint64,string,string)uint64'] | TurtleMonitorArgs['tuple']['update_egg_data(uint64,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateEggData(params)))
        resultMappers.push((v) => client.decodeReturnValue('update_egg_data(uint64,string,string)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the TurtleMonitor contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TurtleMonitorComposer
  }
}
export type TurtleMonitorComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the add_creator(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addCreator(params?: CallParams<TurtleMonitorArgs['obj']['add_creator(address)void'] | TurtleMonitorArgs['tuple']['add_creator(address)void']>): TurtleMonitorComposer<[...TReturns, TurtleMonitorReturns['add_creator(address)void'] | undefined]>

  /**
   * Calls the remove_creator(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeCreator(params?: CallParams<TurtleMonitorArgs['obj']['remove_creator(address)void'] | TurtleMonitorArgs['tuple']['remove_creator(address)void']>): TurtleMonitorComposer<[...TReturns, TurtleMonitorReturns['remove_creator(address)void'] | undefined]>

  /**
   * Calls the add_modifier(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addModifier(params?: CallParams<TurtleMonitorArgs['obj']['add_modifier(address)void'] | TurtleMonitorArgs['tuple']['add_modifier(address)void']>): TurtleMonitorComposer<[...TReturns, TurtleMonitorReturns['add_modifier(address)void'] | undefined]>

  /**
   * Calls the remove_modifier(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeModifier(params?: CallParams<TurtleMonitorArgs['obj']['remove_modifier(address)void'] | TurtleMonitorArgs['tuple']['remove_modifier(address)void']>): TurtleMonitorComposer<[...TReturns, TurtleMonitorReturns['remove_modifier(address)void'] | undefined]>

  /**
   * Calls the is_modifier_addr(address)bool ABI method.
   *
   * Metodo ABI per controllare se 'check_addr' e' un modifier registrato.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isModifierAddr(params?: CallParams<TurtleMonitorArgs['obj']['is_modifier_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_modifier_addr(address)bool']>): TurtleMonitorComposer<[...TReturns, TurtleMonitorReturns['is_modifier_addr(address)bool'] | undefined]>

  /**
   * Calls the is_creator_addr(address)bool ABI method.
   *
   * Metodo ABI per controllare se 'check_addr' e' un creator registrato.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isCreatorAddr(params?: CallParams<TurtleMonitorArgs['obj']['is_creator_addr(address)bool'] | TurtleMonitorArgs['tuple']['is_creator_addr(address)bool']>): TurtleMonitorComposer<[...TReturns, TurtleMonitorReturns['is_creator_addr(address)bool'] | undefined]>

  /**
   * Calls the create_egg_nft(string,string,string)uint64 ABI method.
   *
  * - Admin o un creator possono chiamare
  - Crea un NFT ASA - Salva in Box "egg:<asset_id>" = "non_schiuso" (stato iniziale) - Emette un log Ritorna asset_id creato

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEggNft(params?: CallParams<TurtleMonitorArgs['obj']['create_egg_nft(string,string,string)uint64'] | TurtleMonitorArgs['tuple']['create_egg_nft(string,string,string)uint64']>): TurtleMonitorComposer<[...TReturns, TurtleMonitorReturns['create_egg_nft(string,string,string)uint64'] | undefined]>

  /**
   * Calls the update_egg_data(uint64,string,string)uint64 ABI method.
   *
  * - Admin o 'modifier'
  - Riconfigura l'ASA cambiando 'url' - Sovrascrive la Box "egg:<asa_id>" con i nuovi dati (data_blob) - Emette un log

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateEggData(params?: CallParams<TurtleMonitorArgs['obj']['update_egg_data(uint64,string,string)uint64'] | TurtleMonitorArgs['tuple']['update_egg_data(uint64,string,string)uint64']>): TurtleMonitorComposer<[...TReturns, TurtleMonitorReturns['update_egg_data(uint64,string,string)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TurtleMonitor smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TurtleMonitorComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TurtleMonitorComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TurtleMonitorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TurtleMonitorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TurtleMonitorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TurtleMonitorComposerResults<TReturns>>
}
export type TurtleMonitorComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

